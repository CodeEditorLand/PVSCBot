[
  {
    "sha": "bd68f7a02549f7b1a4d8fdcce04fb2bb2193a9ec",
    "filename": ".travis.yml",
    "status": "modified",
    "additions": 2,
    "deletions": 5,
    "changes": 7,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/.travis.yml",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/.travis.yml",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/.travis.yml?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -55,7 +55,6 @@ before_install: |\n   nvm use 8.9.1\n   npm install npm@latest -g\n   npm install -g vsce\n-  npm install -g azure-cli\n   export CI_PYTHON_PATH=`which python`\n install:\n   - travis_wait 5 npm ci\n@@ -97,18 +96,16 @@ script:\n         python3 -m pip install --upgrade -r tpn/requirements.txt;\n         python3 tpn --npm package-lock.json --config tpn/distribution.toml /dev/null;\n     fi\n-  - if [[ $BUNDLE == \"true\" && $AZURE_STORAGE_ACCOUNT && \"$TRAVIS_BRANCH\" == \"master\" && \"$TRAVIS_PULL_REQUEST\" == \"false\" ]]; then\n+  - if [[ $BUNDLE == \"true\"]]; then\n         npm run clean;\n         npm run package;\n         npx gulp clean:cleanExceptTests;\n         npm run testSmoke;\n-        azure storage blob upload python*.vsix $AZURE_STORAGE_CONTAINER ms-python-insiders.vsix --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_ACCESS_KEY --quiet;\n     fi\n-  - if [[ $BUNDLE == \"true\" && $AZURE_STORAGE_ACCOUNT && \"$TRAVIS_BRANCH\" == release* && \"$TRAVIS_PULL_REQUEST\" == \"false\" ]]; then\n+  - if [[ $BUNDLE == \"true\"]]; then\n         npm run clean;\n         npm run package;\n         npx gulp clean:cleanExceptTests;\n         npm run testSmoke;\n-        azure storage blob upload python*.vsix $AZURE_STORAGE_CONTAINER ms-python-$TRAVIS_BRANCH.vsix --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_ACCESS_KEY --quiet;\n     fi\n   - bash <(curl -s https://codecov.io/bash)"
  },
  {
    "sha": "f200fa0fbef71afb1612ffcbc95d1f4f6bce9c06",
    "filename": "news/3 Code Health/3684.md",
    "status": "added",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/news/3%20Code%20Health/3684.md",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/news/3%20Code%20Health/3684.md",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/news/3%20Code%20Health/3684.md?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -0,0 +1 @@\n+Fixed language server smoke tests."
  },
  {
    "sha": "ce42dc937372b5532acd1cdd5e30ee7408bc2618",
    "filename": "src/test/smoke/_run_first_msLanguageServer.smoke.test.ts",
    "status": "removed",
    "additions": 0,
    "deletions": 106,
    "changes": 106,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/7ea52079acd5069a7d5d155ddbf358daa15b53c9/src/test/smoke/_run_first_msLanguageServer.smoke.test.ts",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/7ea52079acd5069a7d5d155ddbf358daa15b53c9/src/test/smoke/_run_first_msLanguageServer.smoke.test.ts",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/src/test/smoke/_run_first_msLanguageServer.smoke.test.ts?ref=7ea52079acd5069a7d5d155ddbf358daa15b53c9",
    "patch": "@@ -1,106 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-'use strict';\n-\n-// tslint:disable:max-func-body-length no-invalid-this no-any\n-\n-import * as assert from 'assert';\n-import { expect } from 'chai';\n-import * as fs from 'fs-extra';\n-import * as glob from 'glob';\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-import { waitForCondition } from '../common';\n-import { EXTENSION_ROOT_DIR_FOR_TESTS, IS_SMOKE_TEST, SMOKE_TEST_EXTENSIONS_DIR } from '../constants';\n-import { noop, sleep } from '../core';\n-import { closeActiveWindows, initialize, initializeTest } from '../initialize';\n-\n-const fileDefinitions = path.join(EXTENSION_ROOT_DIR_FOR_TESTS, 'src', 'testMultiRootWkspc', 'smokeTests', 'definitions.py');\n-\n-suite('Smoke Test: Language Server', function () {\n-    // Large value to allow for LS to get downloaded.\n-    this.timeout(4 * 60000);\n-\n-    suiteSetup(async function () {\n-        if (!IS_SMOKE_TEST) {\n-            return this.skip();\n-        }\n-        await removeLanguageServerFiles();\n-        await enableJedi(false);\n-        await updateSetting('linting.ignorePatterns', ['**/dir1/**']);\n-        await initialize();\n-    });\n-    setup(initializeTest);\n-    suiteTeardown(async () => {\n-        await enableJedi(undefined);\n-        await closeActiveWindows();\n-        await updateSetting('linting.ignorePatterns', undefined);\n-    });\n-    teardown(closeActiveWindows);\n-    async function updateSetting(setting: string, value: any) {\n-        const resource = vscode.workspace.workspaceFolders![0].uri;\n-        await vscode.workspace.getConfiguration('python', resource).update(setting, value, vscode.ConfigurationTarget.WorkspaceFolder);\n-    }\n-    async function removeLanguageServerFiles() {\n-        const folders = await getLanaguageServerFolders();\n-        await Promise.all(folders.map(item => fs.remove(item).catch(noop)));\n-    }\n-    async function isLanguageServerDownloaded() {\n-        // tslint:disable-next-line:no-unnecessary-local-variable\n-        const downloaded = await getLanaguageServerFolders().then(items => items.length > 0);\n-        return downloaded;\n-    }\n-    async function getLanaguageServerFolders(): Promise<string[]> {\n-        return new Promise<string[]>((resolve, reject) => {\n-            glob('languageServer.*', { cwd: SMOKE_TEST_EXTENSIONS_DIR }, (ex, matches) => {\n-                ex ? reject(ex) : resolve(matches.map(item => path.join(SMOKE_TEST_EXTENSIONS_DIR, item)));\n-            });\n-        });\n-    }\n-    function isJediEnabled() {\n-        const resource = vscode.workspace.workspaceFolders![0].uri;\n-        const settings = vscode.workspace.getConfiguration('python', resource);\n-        return settings.get<boolean>('jediEnabled') === true;\n-    }\n-    async function enableJedi(enable: boolean | undefined) {\n-        if (isJediEnabled() === enable) {\n-            return;\n-        }\n-        await updateSetting('jediEnabled', enable);\n-    }\n-\n-    async function openFile(file: string): Promise<vscode.TextDocument> {\n-        const textDocument = await vscode.workspace.openTextDocument(file);\n-        await vscode.window.showTextDocument(textDocument);\n-        assert(vscode.window.activeTextEditor, 'No active editor');\n-        // Make sure LS completes file loading and analysis.\n-        // In test mode it awaits for the completion before trying\n-        // to fetch data for completion, hover.etc.\n-        await vscode.commands.executeCommand('vscode.executeCompletionItemProvider', textDocument.uri, new vscode.Position(0, 0));\n-        await waitForCondition(isLanguageServerDownloaded, 30_000, 'Language Server not downloaded');\n-        // For for LS to get extracted.\n-        await sleep(10_000);\n-        return textDocument;\n-    }\n-\n-    test('Definitions', async () => {\n-        const startPosition = new vscode.Position(13, 6);\n-        const textDocument = await openFile(fileDefinitions);\n-        let tested = false;\n-        for (let i = 0; i < 5; i += 1) {\n-            const locations = await vscode.commands.executeCommand<vscode.Location[]>('vscode.executeDefinitionProvider', textDocument.uri, startPosition);\n-            if (locations && locations.length > 0) {\n-                expect(locations![0].uri.fsPath).to.contain(path.basename(fileDefinitions));\n-                tested = true;\n-                break;\n-            } else {\n-                // Wait for LS to start.\n-                await sleep(5_000);\n-            }\n-        }\n-        if (!tested) {\n-            assert.fail('Failled to test definitions');\n-        }\n-    });\n-});"
  },
  {
    "sha": "0b8bfe2e62a55031fcc52bccd58c045220c75f5c",
    "filename": "src/test/smoke/common.ts",
    "status": "added",
    "additions": 76,
    "deletions": 0,
    "changes": 76,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/common.ts",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/common.ts",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/src/test/smoke/common.ts?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -0,0 +1,76 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+'use strict';\n+\n+// tslint:disable:no-any no-invalid-this no-default-export no-console\n+\n+import * as assert from 'assert';\n+import * as fs from 'fs-extra';\n+import * as glob from 'glob';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import { waitForCondition } from '../common';\n+import { EXTENSION_ROOT_DIR_FOR_TESTS, IS_SMOKE_TEST, SMOKE_TEST_EXTENSIONS_DIR } from '../constants';\n+import { noop, sleep } from '../core';\n+import { initialize } from '../initialize';\n+\n+let initialized = false;\n+const fileDefinitions = path.join(EXTENSION_ROOT_DIR_FOR_TESTS, 'src', 'testMultiRootWkspc', 'smokeTests', 'definitions.py');\n+\n+export async function initializeSmokeTests() {\n+    if (!IS_SMOKE_TEST || initialized) {\n+        return;\n+    }\n+    await removeLanguageServerFiles();\n+    await enableJedi(false);\n+    await initialize();\n+    await openFileAndWaitForLS(fileDefinitions);\n+    initialized = true;\n+}\n+\n+export async function updateSetting(setting: string, value: any) {\n+    const resource = vscode.workspace.workspaceFolders![0].uri;\n+    await vscode.workspace.getConfiguration('python', resource).update(setting, value, vscode.ConfigurationTarget.WorkspaceFolder);\n+}\n+export async function removeLanguageServerFiles() {\n+    const folders = await getLanaguageServerFolders();\n+    await Promise.all(folders.map(item => fs.remove(item).catch(noop)));\n+}\n+async function getLanaguageServerFolders(): Promise<string[]> {\n+    return new Promise<string[]>((resolve, reject) => {\n+        glob('languageServer.*', { cwd: SMOKE_TEST_EXTENSIONS_DIR }, (ex, matches) => {\n+            ex ? reject(ex) : resolve(matches.map(item => path.join(SMOKE_TEST_EXTENSIONS_DIR, item)));\n+        });\n+    });\n+}\n+export function isJediEnabled() {\n+    const resource = vscode.workspace.workspaceFolders![0].uri;\n+    const settings = vscode.workspace.getConfiguration('python', resource);\n+    return settings.get<boolean>('jediEnabled') === true;\n+}\n+export async function enableJedi(enable: boolean | undefined) {\n+    if (isJediEnabled() === enable) {\n+        return;\n+    }\n+    await updateSetting('jediEnabled', enable);\n+}\n+export async function openFileAndWaitForLS(file: string): Promise<vscode.TextDocument> {\n+    const textDocument = await vscode.workspace.openTextDocument(file);\n+    await vscode.window.showTextDocument(textDocument);\n+    assert(vscode.window.activeTextEditor, 'No active editor');\n+    // Make sure LS completes file loading and analysis.\n+    // In test mode it awaits for the completion before trying\n+    // to fetch data for completion, hover.etc.\n+    await vscode.commands.executeCommand('vscode.executeCompletionItemProvider', textDocument.uri, new vscode.Position(0, 0));\n+    await waitForCondition(isLanguageServerDownloaded, 30_000, 'Language Server not downloaded');\n+    // For for LS to get extracted.\n+    await sleep(10_000);\n+    return textDocument;\n+}\n+\n+async function isLanguageServerDownloaded() {\n+    // tslint:disable-next-line:no-unnecessary-local-variable\n+    const downloaded = await getLanaguageServerFolders().then(items => items.length > 0);\n+    return downloaded;\n+}"
  },
  {
    "sha": "1d4f0c08c314a21426d7f3aa76b14be5b5716f08",
    "filename": "src/test/smoke/debugger.smoke.test.ts",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/debugger.smoke.test.ts",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/debugger.smoke.test.ts",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/src/test/smoke/debugger.smoke.test.ts?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -12,15 +12,17 @@ import * as vscode from 'vscode';\n import { openFile, waitForCondition } from '../common';\n import { EXTENSION_ROOT_DIR_FOR_TESTS, IS_SMOKE_TEST } from '../constants';\n import { closeActiveWindows, initializeTest } from '../initialize';\n+import { initializeSmokeTests } from './common';\n \n suite('Smoke Test: Debug file', function () {\n     // Large value to allow for LS to get downloaded.\n     this.timeout(4 * 60_000);\n \n-    suiteSetup(function () {\n+    suiteSetup(async function () {\n         if (!IS_SMOKE_TEST) {\n             return this.skip();\n         }\n+        await initializeSmokeTests();\n     });\n     setup(initializeTest);\n     suiteTeardown(closeActiveWindows);"
  },
  {
    "sha": "c409d63c459c23664082a6c65cc7f09b06e9d853",
    "filename": "src/test/smoke/msLanguageServer.smoke.test.ts",
    "status": "added",
    "additions": 61,
    "deletions": 0,
    "changes": 61,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/msLanguageServer.smoke.test.ts",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/msLanguageServer.smoke.test.ts",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/src/test/smoke/msLanguageServer.smoke.test.ts?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+'use strict';\n+\n+// tslint:disable:max-func-body-length no-invalid-this no-any\n+\n+import * as assert from 'assert';\n+import { expect } from 'chai';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import { updateSetting } from '../common';\n+import { EXTENSION_ROOT_DIR_FOR_TESTS, IS_SMOKE_TEST } from '../constants';\n+import { sleep } from '../core';\n+import { closeActiveWindows, initializeTest } from '../initialize';\n+import { enableJedi, initializeSmokeTests, openFileAndWaitForLS } from './common';\n+\n+const fileDefinitions = path.join(EXTENSION_ROOT_DIR_FOR_TESTS, 'src', 'testMultiRootWkspc', 'smokeTests', 'definitions.py');\n+\n+suite('Smoke Test: Language Server', function () {\n+    // Large value to allow for LS to get downloaded.\n+    this.timeout(4 * 60000);\n+\n+    suiteSetup(async function () {\n+        if (!IS_SMOKE_TEST) {\n+            return this.skip();\n+        }\n+        await updateSetting('linting.ignorePatterns', ['**/dir1/**'], vscode.workspace.workspaceFolders![0].uri, vscode.ConfigurationTarget.WorkspaceFolder);\n+        await initializeSmokeTests();\n+    });\n+    setup(async () => {\n+        await initializeTest();\n+        await closeActiveWindows();\n+    });\n+    suiteTeardown(async () => {\n+        await enableJedi(undefined);\n+        await closeActiveWindows();\n+        await updateSetting('linting.ignorePatterns', undefined, vscode.workspace.workspaceFolders![0].uri, vscode.ConfigurationTarget.WorkspaceFolder);\n+    });\n+    teardown(closeActiveWindows);\n+\n+    test('Definitions', async () => {\n+        const startPosition = new vscode.Position(13, 6);\n+        const textDocument = await openFileAndWaitForLS(fileDefinitions);\n+        let tested = false;\n+        for (let i = 0; i < 5; i += 1) {\n+            const locations = await vscode.commands.executeCommand<vscode.Location[]>('vscode.executeDefinitionProvider', textDocument.uri, startPosition);\n+            if (locations && locations.length > 0) {\n+                expect(locations![0].uri.fsPath).to.contain(path.basename(fileDefinitions));\n+                tested = true;\n+                break;\n+            } else {\n+                // Wait for LS to start.\n+                await sleep(5_000);\n+            }\n+        }\n+        if (!tested) {\n+            assert.fail('Failled to test definitions');\n+        }\n+    });\n+});"
  },
  {
    "sha": "7b5ca203f7115c3698431b56e92ed24bb267c90f",
    "filename": "src/test/smoke/runInTerminal.smoke.test.ts",
    "status": "modified",
    "additions": 3,
    "deletions": 1,
    "changes": 4,
    "blob_url": "https://github.com/Microsoft/vscode-python/blob/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/runInTerminal.smoke.test.ts",
    "raw_url": "https://github.com/Microsoft/vscode-python/raw/f1013549456d13eb15dab4fffaa6cfe172b4244e/src/test/smoke/runInTerminal.smoke.test.ts",
    "contents_url": "https://api.github.com/repos/Microsoft/vscode-python/contents/src/test/smoke/runInTerminal.smoke.test.ts?ref=f1013549456d13eb15dab4fffaa6cfe172b4244e",
    "patch": "@@ -11,15 +11,17 @@ import * as vscode from 'vscode';\n import { openFile, waitForCondition } from '../common';\n import { EXTENSION_ROOT_DIR_FOR_TESTS, IS_SMOKE_TEST } from '../constants';\n import { closeActiveWindows, initializeTest } from '../initialize';\n+import { initializeSmokeTests } from './common';\n \n suite('Smoke Test: Run Python File In Terminal', function () {\n     // Large value to allow for LS to get downloaded.\n     this.timeout(4 * 60_000);\n \n-    suiteSetup(function () {\n+    suiteSetup(async function () {\n         if (!IS_SMOKE_TEST) {\n             return this.skip();\n         }\n+        await initializeSmokeTests();\n     });\n     setup(initializeTest);\n     suiteTeardown(closeActiveWindows);"
  }
]
